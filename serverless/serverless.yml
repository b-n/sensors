service: sensors

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"
  environment:
    SETUP_TABLE: ${self:service}-setup-${self:provider.stage}
    DATA_TABLE: ${self:service}-data-${self:provider.stage}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline:
    port: 4000

package:
  individually: true

functions:
  iot:
    handler: src/handlers/iot.handler
    events:
      - iot:
          sql: >-
            select timestamp, thing, oldPPM, newPPM
            from 'sensor-reading-${self:provider.stage}'
  iot-test:
    handler: src/handlers/iot.test
    events:
      - http:
          path: iot
          method: post
  thing-detail:
    handler: src/handlers/sensor-get.handler
    events:
      - http:
          path: thing/{thing}
          method: get
          cors: true

resources:
  Resources:
    DataTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: "Retain"
      Properties:
        TableName: ${self:provider.environment.DATA_TABLE}
        AttributeDefinitions:
          -
            AttributeName: thing
            AttributeType: S
          -
            AttributeName: summaryDate
            AttributeType: S
        KeySchema:
          -
            AttributeName: thing
            KeyType: HASH
          -
            AttributeName: summaryDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SetupTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: "Retain"
      Properties:
        TableName: ${self:provider.environment.SETUP_TABLE}
        AttributeDefinitions:
          -
            AttributeName: thing
            AttributeType: S

        KeySchema:
          -
            AttributeName: thing
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SensorIoTEvent:
      Type: "AWS::IoT::TopicRule"
      Properties:
        RuleName: SensorReading_${self:provider.stage}
        TopicRulePayload:
          Description: Take readings things that are sensors, and republish them to a better topic
          RuleDisabled: "false"
          Sql: >-
            select timestamp, topic(3) as thing, previous.state.reported.ppm as oldPPM, current.state.reported.ppm as newPPM
            from '$aws/things/+/shadow/update/documents'
            where previous.state.reported.readingNumber <> current.state.reported.readingNumber
          Actions:
            -
              Republish:
                Topic: sensor-reading-${self:provider.stage}
                RoleArn:
                  Fn::GetAtt: 
                    - IoTRole
                    - Arn
    IoTRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-iotRole
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
          -
            PolicyName:
              Fn::Join:
                - "-"
                - - ${self:provider.stage}
                  - ${self:service}
                  - iot
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: iot:Publish
                  Resource: "arn:aws:iot:*:*:topic/*"
